import discord
from discord.ext import commands
from discord import app_commands
import random
import asyncio
import json
import os

# Config
TOKEN = 'MTQxNzE0MzYyMjQ5ODc4MzM0Mw.GBol5V.J_Mj5ROmKYX1E7X35WyU_NR2SAvxKAV8p88M18'
QUESTION_TIMEOUT = 30
NUM_QUESTIONS = 10

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

# Load c√¢u h·ªèi t·ª´ file JSON
try:
    with open("questions.json", "r", encoding="utf-8") as f:
        all_questions = json.load(f)["questions"]
    print(f"‚úÖ ƒê√£ t·∫£i {len(all_questions)} c√¢u h·ªèi th√†nh c√¥ng!")
except Exception as e:
    print(f"‚ùå L·ªói khi t·∫£i questions.json: {e}")
    all_questions = []


@bot.event
async def on_ready():
    try:
        await bot.tree.sync()
        print(f"ü§ñ {bot.user} ƒë√£ s·∫µn s√†ng v·ªõi slash command /quiz")
    except Exception as e:
        print(f"‚ùå L·ªói sync commands: {e}")


@bot.tree.command(name="quiz", description="B·∫Øt ƒë·∫ßu quiz v·ªõi 10 c√¢u h·ªèi ng·∫´u nhi√™n")
async def quiz(interaction: discord.Interaction):
    if len(all_questions) < NUM_QUESTIONS:
        await interaction.response.send_message("‚ùå Kh√¥ng ƒë·ªß c√¢u h·ªèi ƒë·ªÉ b·∫Øt ƒë·∫ßu quiz!", ephemeral=True)
        return

    await interaction.response.send_message(
        f"üéØ Quiz b·∫Øt ƒë·∫ßu v·ªõi {NUM_QUESTIONS} c√¢u h·ªèi! B·∫°n c√≥ {QUESTION_TIMEOUT} gi√¢y cho m·ªói c√¢u.\n"
        f"Ch·ªçn ƒë√°p √°n b·∫±ng c√°ch click emoji üá¶ üáß üá® üá©",
        ephemeral=False
    )

    selected_questions = random.sample(all_questions, NUM_QUESTIONS)
    score = 0
    wrong_answers = []

    for i, q in enumerate(selected_questions, 1):
        # Embed c√¢u h·ªèi
        embed = discord.Embed(
            title=f"‚ùì C√¢u h·ªèi {i}/{NUM_QUESTIONS}",
            description=q["question"],
            color=discord.Color.blue()
        )
        options_text = ""
        for option, text in q["options"].items():
            emoji = {"A": "üá¶", "B": "üáß", "C": "üá®", "D": "üá©"}[option]
            options_text += f"{emoji} **{option}.** {text}\n"
        embed.add_field(name="üìã C√°c l·ª±a ch·ªçn:", value=options_text, inline=False)
        embed.set_footer(text=f"‚è∞ Th·ªùi gian: {QUESTION_TIMEOUT} gi√¢y | üéØ ƒêi·ªÉm hi·ªán t·∫°i: {score}")

        # G·ª≠i c√¢u h·ªèi
        question_msg = await interaction.channel.send(embed=embed)

        # Th√™m reactions
        for emoji in ["üá¶", "üáß", "üá®", "üá©"]:
            await question_msg.add_reaction(emoji)

        # Ch·ªù c√¢u tr·∫£ l·ªùi
        def check(reaction, user):
            return (
                user == interaction.user
                and str(reaction.emoji) in ["üá¶", "üáß", "üá®", "üá©"]
                and reaction.message.id == question_msg.id
            )

        try:
            reaction, user = await bot.wait_for("reaction_add", timeout=QUESTION_TIMEOUT, check=check)
        except asyncio.TimeoutError:
            await interaction.channel.send(
                f"‚è∞ H·∫øt th·ªùi gian! ƒê√°p √°n ƒë√∫ng: **{q['correct_answer']}. {q['options'][q['correct_answer']]}**"
            )
            wrong_answers.append(q["question"])
            continue

        # ƒê√°p √°n user ch·ªçn
        emoji_to_option = {"üá¶": "A", "üáß": "B", "üá®": "C", "üá©": "D"}
        user_answer = emoji_to_option.get(str(reaction.emoji), "")

        if user_answer == q["correct_answer"]:
            score += 1
            await interaction.channel.send(f"‚úÖ Ch√≠nh x√°c! ({score}/{i})")
        else:
            await interaction.channel.send(
                f"‚ùå Sai r·ªìi! B·∫°n ch·ªçn {user_answer}, ƒë√°p √°n ƒë√∫ng l√† {q['correct_answer']}."
            )
            wrong_answers.append(q["question"])

        await asyncio.sleep(2)

    # K·∫øt qu·∫£ cu·ªëi c√πng
    percentage = round((score / NUM_QUESTIONS) * 100, 1)
    result_embed = discord.Embed(
        title="üìä K·∫øt Qu·∫£ Quiz",
        description=f"üéØ ƒêi·ªÉm s·ªë: {score}/{NUM_QUESTIONS} ({percentage}%)",
        color=discord.Color.green() if percentage >= 70 else discord.Color.red(),
    )
    await interaction.channel.send(embed=result_embed)


if __name__ == "__main__":
    bot.run(TOKEN)
